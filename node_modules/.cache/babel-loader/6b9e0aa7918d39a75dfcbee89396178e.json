{"ast":null,"code":"var _jsxFileName = \"/home/hackerboi/Dokumente/stonksterminal/src/Components/chart.jsx\";\nimport React from 'react';\nimport { Line } from 'react-chartjs-2';\n\nclass App extends React.Component {\n  constructor(props) {\n    super();\n    this.state = {\n      isLoading: false,\n      btcUsdChart: props.Daten\n    };\n  }\n\n  componentDidMount() {}\n\n  render() {\n    let xxx = [[], []];\n\n    function todisplay(chartdata) {\n      let tempentries = Object.entries(chartdata);\n\n      for (const element of tempentries) {\n        xxx[1].push(element[1]);\n        xxx[0].push(element[0]);\n      }\n\n      ;\n    }\n\n    ;\n    todisplay(this.state.btcUsdChart);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"chart\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Line, {\n      data: {\n        labels: xxx[1],\n        //Xachse\n        datasets: [{\n          data: xxx[0],\n          //Yachse //Data als Array\n          fill: false,\n          backgroundColor: ['rgba(255, 99, 132, 0.2)'],\n          borderColor: ['rgba(255, 99, 132, 1)'],\n          borderWidth: 2 //Breite der Linie\n\n        }]\n      },\n      options: {\n        scales: {\n          yAxes: [{\n            type: 'linear',\n            ticks: {\n              beginAtZero: false\n            }\n          }]\n        }\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/home/hackerboi/Dokumente/stonksterminal/src/Components/chart.jsx"],"names":["React","Line","App","Component","constructor","props","state","isLoading","btcUsdChart","Daten","componentDidMount","render","xxx","todisplay","chartdata","tempentries","Object","entries","element","push","labels","datasets","data","fill","backgroundColor","borderColor","borderWidth","scales","yAxes","type","ticks","beginAtZero"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,IAAR,QAAmB,iBAAnB;;AAEA,MAAMC,GAAN,SAAkBF,KAAK,CAACG,SAAxB,CAAkC;AAE9BC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,KADA;AAEXC,MAAAA,WAAW,EAAEH,KAAK,CAACI;AAFR,KAAb;AAID;;AAEDC,EAAAA,iBAAiB,GAAG,CAEnB;;AAEDC,EAAAA,MAAM,GAAG;AAGP,QAAIC,GAAG,GAAG,CAAC,EAAD,EAAI,EAAJ,CAAV;;AAEA,aAASC,SAAT,CAAoBC,SAApB,EAA8B;AAC5B,UAAIC,WAAW,GAAGC,MAAM,CAACC,OAAP,CAAeH,SAAf,CAAlB;;AAEA,WAAK,MAAMI,OAAX,IAAsBH,WAAtB,EAAmC;AACjCH,QAAAA,GAAG,CAAC,CAAD,CAAH,CAAOO,IAAP,CAAYD,OAAO,CAAC,CAAD,CAAnB;AACAN,QAAAA,GAAG,CAAC,CAAD,CAAH,CAAOO,IAAP,CAAYD,OAAO,CAAC,CAAD,CAAnB;AACD;;AAAA;AAIF;;AAAA;AACDL,IAAAA,SAAS,CAAC,KAAKP,KAAL,CAAWE,WAAZ,CAAT;AAKI,wBACE;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,IAAD;AAAQ,MAAA,IAAI,EAAE;AACNY,QAAAA,MAAM,EAAER,GAAG,CAAC,CAAD,CADL;AACU;AAChBS,QAAAA,QAAQ,EAAE,CACN;AAEAC,UAAAA,IAAI,EAAEV,GAAG,CAAC,CAAD,CAFT;AAEc;AACdW,UAAAA,IAAI,EAAE,KAHN;AAIAC,UAAAA,eAAe,EAAE,CACb,yBADa,CAJjB;AASAC,UAAAA,WAAW,EAAE,CACT,uBADS,CATb;AAaAC,UAAAA,WAAW,EAAE,CAbb,CAae;;AAbf,SADM;AAFJ,OAAd;AAsBI,MAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE;AACJC,UAAAA,KAAK,EAAE,CAAC;AACJC,YAAAA,IAAI,EAAE,QADF;AAEJC,YAAAA,KAAK,EAAE;AACPC,cAAAA,WAAW,EAAE;AADN;AAFH,WAAD;AADH;AADH,OAtBb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADF;AAuCD;;AA3EyB;;AA8EhC,eAAe7B,GAAf","sourcesContent":["import React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nclass App extends React.Component {\n  \n    constructor(props) {\n      super();\n   \n      this.state = {\n        isLoading: false,\n        btcUsdChart: props.Daten\n      };\n    }\n  \n    componentDidMount() {\n\n    }\n    \n    render() {\n  \n      \n      let xxx = [[],[]];\n      \n      function todisplay (chartdata){\n        let tempentries = Object.entries(chartdata);\n  \n        for (const element of tempentries) {\n          xxx[1].push(element[1]);\n          xxx[0].push(element[0]);\n        };\n  \n  \n  \n      };\n      todisplay(this.state.btcUsdChart)\n  \n      \n  \n  \n          return (\n            <div className=\"chart\">\n            <Line   data={{\n                    labels: xxx[1], //Xachse\n                    datasets: [\n                        {\n                \n                        data: xxx[0], //Yachse //Data als Array\n                        fill: false,\n                        backgroundColor: [\n                            'rgba(255, 99, 132, 0.2)',\n                    \n                    \n                        ],\n                        borderColor: [\n                            'rgba(255, 99, 132, 1)',\n                    \n                        ],\n                        borderWidth: 2 //Breite der Linie\n                    \n                        }\n                    ]\n                }}\n\n                options={{\n                    scales: {\n                        yAxes: [{\n                            type: 'linear',\n                            ticks: {\n                            beginAtZero: false\n                            }\n                        }]\n                    }\n                }\n                }/>\n      \n            \n        </div>\n          )\n        }\n  }\n   \n  export default App;\n  \n\n"]},"metadata":{},"sourceType":"module"}